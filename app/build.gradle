import com.android.build.gradle.api.ApplicationVariant
import groovy.json.JsonSlurper
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
ext.versionMajor = 1
ext.versionMinor = 1
ext.versionPatch = 6
ext.versionBuild = 20

def computeVersionName() {
    return "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
}

def computeVersionNumber() {
    return versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
}
android {
    compileSdk 32
    flavorDimensions "version"

    defaultConfig {
        applicationId "com.example.testing"
        minSdk 21
        targetSdk 32
        versionCode computeVersionNumber()
        versionName computeVersionName()
        flavorDimensions "version"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    def flavourFile = file('flavours/flavourfiles.json')
    def flavourKeys = new JsonSlurper().parseText(flavourFile.text)
    def configs = flavourKeys.flavours
    def resMap = [:]
    def serviceMap=[:]
    configs.each { config ->
        android.productFlavors.create(config.flavourName, { flavor ->
            resMap.put(config.flavourName,config.introsliders)
            serviceMap.put(config.flavourName,config.introsliders)
            serviceMap.put(config.flavourName + "site",config.dependency)
            serviceMap.put(config.flavourName + "site_base_url", config.site_base_url)
            flavor.dimension = 'version'
            flavor.applicationId = config.appId
            manifestPlaceholders = [ appIcon          : "@mipmap/ic_launcher",
                                     flavored_app_name: config.appName,
                                     appId: config.appId,
                                     siteBaseUrl: config.site_base_url]
        })
    }


    applicationVariants.all { ApplicationVariant variant ->
        for (flavor in variant.productFlavors) {
            // variant.outputs[0].outputFile = file("$project.buildDir/${YourNewPath}/${YourNewApkName}.apk")
            //variant.resValue("string", "flavored_name", resMap.get(flavor.name))
            variant.resValue("string", "prefix", flavor.name)
            variant.resValue("string","firebaseHelperUrl","https://quiz-live-stats.firebaseio.com")
            variant.resValue("string","firebaseChatBaseUrl","https://winuall-connect-chat-db.firebaseio.com")
            variant.resValue("string","firebaseUserListUrl","https://winuall-connect-chatprofiledb.firebaseio.com")
            variant.resValue("string", "introsliders", serviceMap.get(flavor.name))
            //variant.resValue("string", "siteBaseUrl", serviceMap.get(flavor.name + "site_base_url"))
            //implementation serviceMap.get(flavor.name + "site")
            //variant.resValue("bool", "introsliders", serviceMap.get(flavor.name))
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    def flavourFile = file('flavours/flavourfiles.json')
    def flavourKeys = new JsonSlurper().parseText(flavourFile.text)
    def configs = flavourKeys.flavours
    def list  = configs.dependency
    list.each{
        implementation(configs.dependency)
    }
    //implementation(configs.dependency)
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}